/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.MacAddress', null, global);
goog.exportSymbol('proto.mac_address', null, global);
goog.exportSymbol('proto.pa_client_state', null, global);
goog.exportSymbol('proto.pa_proximity_event', null, global);
goog.exportSymbol('proto.pa_rssi_event', null, global);
goog.exportSymbol('proto.presence_client_state', null, global);
goog.exportSymbol('proto.presence_client_state.client_state', null, global);
goog.exportSymbol('proto.presence_event', null, global);
goog.exportSymbol('proto.presence_event.presence_event_type', null, global);
goog.exportSymbol('proto.proximity', null, global);
goog.exportSymbol('proto.rssi', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mac_address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mac_address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.mac_address.displayName = 'proto.mac_address';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mac_address.prototype.toObject = function(opt_includeInstance) {
  return proto.mac_address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mac_address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mac_address.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: msg.getAddr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mac_address}
 */
proto.mac_address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mac_address;
  return proto.mac_address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mac_address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mac_address}
 */
proto.mac_address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mac_address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mac_address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mac_address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mac_address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.mac_address.prototype.getAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes addr = 1;
 * This is a type-conversion wrapper around `getAddr()`
 * @return {string}
 */
proto.mac_address.prototype.getAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddr()));
};


/**
 * required bytes addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddr()`
 * @return {!Uint8Array}
 */
proto.mac_address.prototype.getAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.mac_address.prototype.setAddr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.mac_address.prototype.clearAddr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.mac_address.prototype.hasAddr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MacAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MacAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MacAddress.displayName = 'proto.MacAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MacAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.MacAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MacAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MacAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: msg.getAddr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MacAddress}
 */
proto.MacAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MacAddress;
  return proto.MacAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MacAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MacAddress}
 */
proto.MacAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MacAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MacAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MacAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MacAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.MacAddress.prototype.getAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes addr = 1;
 * This is a type-conversion wrapper around `getAddr()`
 * @return {string}
 */
proto.MacAddress.prototype.getAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddr()));
};


/**
 * required bytes addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddr()`
 * @return {!Uint8Array}
 */
proto.MacAddress.prototype.getAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.MacAddress.prototype.setAddr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MacAddress.prototype.clearAddr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MacAddress.prototype.hasAddr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.presence_client_state = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.presence_client_state, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.presence_client_state.displayName = 'proto.presence_client_state';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.presence_client_state.prototype.toObject = function(opt_includeInstance) {
  return proto.presence_client_state.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.presence_client_state} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.presence_client_state.toObject = function(includeInstance, msg) {
  var f, obj = {
    isLabel: jspb.Message.getField(msg, 2),
    labelId: jspb.Message.getField(msg, 3),
    labelCategoryId: jspb.Message.getField(msg, 4),
    state: jspb.Message.getField(msg, 5),
    isAssociated: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.presence_client_state}
 */
proto.presence_client_state.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.presence_client_state;
  return proto.presence_client_state.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.presence_client_state} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.presence_client_state}
 */
proto.presence_client_state.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLabel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLabelId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLabelCategoryId(value);
      break;
    case 5:
      var value = /** @type {!proto.presence_client_state.client_state} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAssociated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.presence_client_state.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.presence_client_state.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.presence_client_state} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.presence_client_state.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {!proto.presence_client_state.client_state} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.presence_client_state.client_state = {
  PASSERBY: 0,
  VISITOR: 1,
  ENGAGED: 2
};

/**
 * optional bool is_label = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.presence_client_state.prototype.getIsLabel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.presence_client_state.prototype.setIsLabel = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.presence_client_state.prototype.clearIsLabel = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_client_state.prototype.hasIsLabel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 label_id = 3;
 * @return {number}
 */
proto.presence_client_state.prototype.getLabelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.presence_client_state.prototype.setLabelId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.presence_client_state.prototype.clearLabelId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_client_state.prototype.hasLabelId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 label_category_id = 4;
 * @return {number}
 */
proto.presence_client_state.prototype.getLabelCategoryId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.presence_client_state.prototype.setLabelCategoryId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.presence_client_state.prototype.clearLabelCategoryId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_client_state.prototype.hasLabelCategoryId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional client_state state = 5;
 * @return {!proto.presence_client_state.client_state}
 */
proto.presence_client_state.prototype.getState = function() {
  return /** @type {!proto.presence_client_state.client_state} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.presence_client_state.client_state} value */
proto.presence_client_state.prototype.setState = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.presence_client_state.prototype.clearState = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_client_state.prototype.hasState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool is_associated = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.presence_client_state.prototype.getIsAssociated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.presence_client_state.prototype.setIsAssociated = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.presence_client_state.prototype.clearIsAssociated = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_client_state.prototype.hasIsAssociated = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pa_client_state = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pa_client_state.repeatedFields_, null);
};
goog.inherits(proto.pa_client_state, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pa_client_state.displayName = 'proto.pa_client_state';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pa_client_state.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pa_client_state.prototype.toObject = function(opt_includeInstance) {
  return proto.pa_client_state.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pa_client_state} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pa_client_state.toObject = function(includeInstance, msg) {
  var f, obj = {
    presenceClientStateList: jspb.Message.toObjectList(msg.getPresenceClientStateList(),
    proto.presence_client_state.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pa_client_state}
 */
proto.pa_client_state.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pa_client_state;
  return proto.pa_client_state.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pa_client_state} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pa_client_state}
 */
proto.pa_client_state.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.presence_client_state;
      reader.readMessage(value,proto.presence_client_state.deserializeBinaryFromReader);
      msg.addPresenceClientState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pa_client_state.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pa_client_state.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pa_client_state} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pa_client_state.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPresenceClientStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.presence_client_state.serializeBinaryToWriter
    );
  }
};


/**
 * repeated presence_client_state presence_client_state = 1;
 * @return {!Array<!proto.presence_client_state>}
 */
proto.pa_client_state.prototype.getPresenceClientStateList = function() {
  return /** @type{!Array<!proto.presence_client_state>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.presence_client_state, 1));
};


/** @param {!Array<!proto.presence_client_state>} value */
proto.pa_client_state.prototype.setPresenceClientStateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.presence_client_state=} opt_value
 * @param {number=} opt_index
 * @return {!proto.presence_client_state}
 */
proto.pa_client_state.prototype.addPresenceClientState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.presence_client_state, opt_index);
};


proto.pa_client_state.prototype.clearPresenceClientStateList = function() {
  this.setPresenceClientStateList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pa_proximity_event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pa_proximity_event.repeatedFields_, null);
};
goog.inherits(proto.pa_proximity_event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pa_proximity_event.displayName = 'proto.pa_proximity_event';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pa_proximity_event.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pa_proximity_event.prototype.toObject = function(opt_includeInstance) {
  return proto.pa_proximity_event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pa_proximity_event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pa_proximity_event.toObject = function(includeInstance, msg) {
  var f, obj = {
    proximityList: jspb.Message.toObjectList(msg.getProximityList(),
    proto.proximity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pa_proximity_event}
 */
proto.pa_proximity_event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pa_proximity_event;
  return proto.pa_proximity_event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pa_proximity_event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pa_proximity_event}
 */
proto.pa_proximity_event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proximity;
      reader.readMessage(value,proto.proximity.deserializeBinaryFromReader);
      msg.addProximity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pa_proximity_event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pa_proximity_event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pa_proximity_event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pa_proximity_event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProximityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proximity.serializeBinaryToWriter
    );
  }
};


/**
 * repeated proximity proximity = 1;
 * @return {!Array<!proto.proximity>}
 */
proto.pa_proximity_event.prototype.getProximityList = function() {
  return /** @type{!Array<!proto.proximity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proximity, 1));
};


/** @param {!Array<!proto.proximity>} value */
proto.pa_proximity_event.prototype.setProximityList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proximity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proximity}
 */
proto.pa_proximity_event.prototype.addProximity = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proximity, opt_index);
};


proto.pa_proximity_event.prototype.clearProximityList = function() {
  this.setProximityList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proximity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proximity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proximity.displayName = 'proto.proximity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proximity.prototype.toObject = function(opt_includeInstance) {
  return proto.proximity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proximity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proximity.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getField(msg, 1),
    staEthMac: (f = msg.getStaEthMac()) && proto.mac_address.toObject(includeInstance, f),
    radioMac: (f = msg.getRadioMac()) && proto.mac_address.toObject(includeInstance, f),
    rssiVal: jspb.Message.getField(msg, 4),
    noiseFloor: jspb.Message.getField(msg, 5),
    associated: jspb.Message.getField(msg, 6),
    apEthMac: (f = msg.getApEthMac()) && proto.mac_address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proximity}
 */
proto.proximity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proximity;
  return proto.proximity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proximity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proximity}
 */
proto.proximity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = new proto.mac_address;
      reader.readMessage(value,proto.mac_address.deserializeBinaryFromReader);
      msg.setStaEthMac(value);
      break;
    case 3:
      var value = new proto.mac_address;
      reader.readMessage(value,proto.mac_address.deserializeBinaryFromReader);
      msg.setRadioMac(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssiVal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNoiseFloor(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAssociated(value);
      break;
    case 7:
      var value = new proto.mac_address;
      reader.readMessage(value,proto.mac_address.deserializeBinaryFromReader);
      msg.setApEthMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proximity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proximity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proximity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proximity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStaEthMac();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mac_address.serializeBinaryToWriter
    );
  }
  f = message.getRadioMac();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mac_address.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getApEthMac();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.mac_address.serializeBinaryToWriter
    );
  }
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.proximity.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proximity.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.proximity.prototype.clearDeviceId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proximity.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional mac_address sta_eth_mac = 2;
 * @return {?proto.mac_address}
 */
proto.proximity.prototype.getStaEthMac = function() {
  return /** @type{?proto.mac_address} */ (
    jspb.Message.getWrapperField(this, proto.mac_address, 2));
};


/** @param {?proto.mac_address|undefined} value */
proto.proximity.prototype.setStaEthMac = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proximity.prototype.clearStaEthMac = function() {
  this.setStaEthMac(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proximity.prototype.hasStaEthMac = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional mac_address radio_mac = 3;
 * @return {?proto.mac_address}
 */
proto.proximity.prototype.getRadioMac = function() {
  return /** @type{?proto.mac_address} */ (
    jspb.Message.getWrapperField(this, proto.mac_address, 3));
};


/** @param {?proto.mac_address|undefined} value */
proto.proximity.prototype.setRadioMac = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proximity.prototype.clearRadioMac = function() {
  this.setRadioMac(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proximity.prototype.hasRadioMac = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 rssi_val = 4;
 * @return {number}
 */
proto.proximity.prototype.getRssiVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proximity.prototype.setRssiVal = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.proximity.prototype.clearRssiVal = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proximity.prototype.hasRssiVal = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 noise_floor = 5;
 * @return {number}
 */
proto.proximity.prototype.getNoiseFloor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proximity.prototype.setNoiseFloor = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.proximity.prototype.clearNoiseFloor = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proximity.prototype.hasNoiseFloor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool associated = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proximity.prototype.getAssociated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.proximity.prototype.setAssociated = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.proximity.prototype.clearAssociated = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proximity.prototype.hasAssociated = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional mac_address ap_eth_mac = 7;
 * @return {?proto.mac_address}
 */
proto.proximity.prototype.getApEthMac = function() {
  return /** @type{?proto.mac_address} */ (
    jspb.Message.getWrapperField(this, proto.mac_address, 7));
};


/** @param {?proto.mac_address|undefined} value */
proto.proximity.prototype.setApEthMac = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.proximity.prototype.clearApEthMac = function() {
  this.setApEthMac(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proximity.prototype.hasApEthMac = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pa_rssi_event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pa_rssi_event.repeatedFields_, null);
};
goog.inherits(proto.pa_rssi_event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pa_rssi_event.displayName = 'proto.pa_rssi_event';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pa_rssi_event.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pa_rssi_event.prototype.toObject = function(opt_includeInstance) {
  return proto.pa_rssi_event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pa_rssi_event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pa_rssi_event.toObject = function(includeInstance, msg) {
  var f, obj = {
    rssiList: jspb.Message.toObjectList(msg.getRssiList(),
    proto.rssi.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pa_rssi_event}
 */
proto.pa_rssi_event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pa_rssi_event;
  return proto.pa_rssi_event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pa_rssi_event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pa_rssi_event}
 */
proto.pa_rssi_event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rssi;
      reader.readMessage(value,proto.rssi.deserializeBinaryFromReader);
      msg.addRssi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pa_rssi_event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pa_rssi_event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pa_rssi_event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pa_rssi_event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRssiList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rssi.serializeBinaryToWriter
    );
  }
};


/**
 * repeated rssi rssi = 1;
 * @return {!Array<!proto.rssi>}
 */
proto.pa_rssi_event.prototype.getRssiList = function() {
  return /** @type{!Array<!proto.rssi>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rssi, 1));
};


/** @param {!Array<!proto.rssi>} value */
proto.pa_rssi_event.prototype.setRssiList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rssi=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rssi}
 */
proto.pa_rssi_event.prototype.addRssi = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rssi, opt_index);
};


proto.pa_rssi_event.prototype.clearRssiList = function() {
  this.setRssiList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rssi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rssi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rssi.displayName = 'proto.rssi';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rssi.prototype.toObject = function(opt_includeInstance) {
  return proto.rssi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rssi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rssi.toObject = function(includeInstance, msg) {
  var f, obj = {
    staEthMac: (f = msg.getStaEthMac()) && proto.mac_address.toObject(includeInstance, f),
    radioMac: (f = msg.getRadioMac()) && proto.mac_address.toObject(includeInstance, f),
    rssiVal: jspb.Message.getField(msg, 3),
    noiseFloor: jspb.Message.getField(msg, 4),
    associated: jspb.Message.getField(msg, 5),
    isAp: jspb.Message.getField(msg, 6),
    age: jspb.Message.getField(msg, 7),
    deviceId: jspb.Message.getField(msg, 8),
    apEthMac: (f = msg.getApEthMac()) && proto.mac_address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rssi}
 */
proto.rssi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rssi;
  return proto.rssi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rssi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rssi}
 */
proto.rssi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mac_address;
      reader.readMessage(value,proto.mac_address.deserializeBinaryFromReader);
      msg.setStaEthMac(value);
      break;
    case 2:
      var value = new proto.mac_address;
      reader.readMessage(value,proto.mac_address.deserializeBinaryFromReader);
      msg.setRadioMac(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssiVal(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNoiseFloor(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAssociated(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAge(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 9:
      var value = new proto.mac_address;
      reader.readMessage(value,proto.mac_address.deserializeBinaryFromReader);
      msg.setApEthMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rssi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rssi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rssi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rssi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStaEthMac();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mac_address.serializeBinaryToWriter
    );
  }
  f = message.getRadioMac();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mac_address.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getApEthMac();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.mac_address.serializeBinaryToWriter
    );
  }
};


/**
 * optional mac_address sta_eth_mac = 1;
 * @return {?proto.mac_address}
 */
proto.rssi.prototype.getStaEthMac = function() {
  return /** @type{?proto.mac_address} */ (
    jspb.Message.getWrapperField(this, proto.mac_address, 1));
};


/** @param {?proto.mac_address|undefined} value */
proto.rssi.prototype.setStaEthMac = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.rssi.prototype.clearStaEthMac = function() {
  this.setStaEthMac(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rssi.prototype.hasStaEthMac = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional mac_address radio_mac = 2;
 * @return {?proto.mac_address}
 */
proto.rssi.prototype.getRadioMac = function() {
  return /** @type{?proto.mac_address} */ (
    jspb.Message.getWrapperField(this, proto.mac_address, 2));
};


/** @param {?proto.mac_address|undefined} value */
proto.rssi.prototype.setRadioMac = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.rssi.prototype.clearRadioMac = function() {
  this.setRadioMac(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rssi.prototype.hasRadioMac = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 rssi_val = 3;
 * @return {number}
 */
proto.rssi.prototype.getRssiVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rssi.prototype.setRssiVal = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.rssi.prototype.clearRssiVal = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rssi.prototype.hasRssiVal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 noise_floor = 4;
 * @return {number}
 */
proto.rssi.prototype.getNoiseFloor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.rssi.prototype.setNoiseFloor = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.rssi.prototype.clearNoiseFloor = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rssi.prototype.hasNoiseFloor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool associated = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rssi.prototype.getAssociated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.rssi.prototype.setAssociated = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.rssi.prototype.clearAssociated = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rssi.prototype.hasAssociated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool is_ap = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.rssi.prototype.getIsAp = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.rssi.prototype.setIsAp = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.rssi.prototype.clearIsAp = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rssi.prototype.hasIsAp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 age = 7;
 * @return {number}
 */
proto.rssi.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.rssi.prototype.setAge = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.rssi.prototype.clearAge = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rssi.prototype.hasAge = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string device_id = 8;
 * @return {string}
 */
proto.rssi.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.rssi.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.rssi.prototype.clearDeviceId = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rssi.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional mac_address ap_eth_mac = 9;
 * @return {?proto.mac_address}
 */
proto.rssi.prototype.getApEthMac = function() {
  return /** @type{?proto.mac_address} */ (
    jspb.Message.getWrapperField(this, proto.mac_address, 9));
};


/** @param {?proto.mac_address|undefined} value */
proto.rssi.prototype.setApEthMac = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.rssi.prototype.clearApEthMac = function() {
  this.setApEthMac(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.rssi.prototype.hasApEthMac = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.presence_event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.presence_event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.presence_event.displayName = 'proto.presence_event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.presence_event.prototype.toObject = function(opt_includeInstance) {
  return proto.presence_event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.presence_event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.presence_event.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getField(msg, 1),
    customerId: jspb.Message.getField(msg, 2),
    event: jspb.Message.getField(msg, 3),
    eventType: jspb.Message.getField(msg, 4),
    paClientState: (f = msg.getPaClientState()) && proto.pa_client_state.toObject(includeInstance, f),
    paRssiEvent: (f = msg.getPaRssiEvent()) && proto.pa_rssi_event.toObject(includeInstance, f),
    paProximityEvent: (f = msg.getPaProximityEvent()) && proto.pa_proximity_event.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.presence_event}
 */
proto.presence_event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.presence_event;
  return proto.presence_event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.presence_event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.presence_event}
 */
proto.presence_event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvent(value);
      break;
    case 4:
      var value = /** @type {!proto.presence_event.presence_event_type} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 5:
      var value = new proto.pa_client_state;
      reader.readMessage(value,proto.pa_client_state.deserializeBinaryFromReader);
      msg.setPaClientState(value);
      break;
    case 6:
      var value = new proto.pa_rssi_event;
      reader.readMessage(value,proto.pa_rssi_event.deserializeBinaryFromReader);
      msg.setPaRssiEvent(value);
      break;
    case 7:
      var value = new proto.pa_proximity_event;
      reader.readMessage(value,proto.pa_proximity_event.deserializeBinaryFromReader);
      msg.setPaProximityEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.presence_event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.presence_event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.presence_event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.presence_event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!proto.presence_event.presence_event_type} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPaClientState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pa_client_state.serializeBinaryToWriter
    );
  }
  f = message.getPaRssiEvent();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pa_rssi_event.serializeBinaryToWriter
    );
  }
  f = message.getPaProximityEvent();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.pa_proximity_event.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.presence_event.presence_event_type = {
  CLIENT_STATE: 0,
  RSSI: 1,
  PROXIMITY: 2
};

/**
 * required uint64 timestamp = 1;
 * @return {number}
 */
proto.presence_event.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.presence_event.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.presence_event.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_event.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string customer_id = 2;
 * @return {string}
 */
proto.presence_event.prototype.getCustomerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.presence_event.prototype.setCustomerId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.presence_event.prototype.clearCustomerId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_event.prototype.hasCustomerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string event = 3;
 * @return {string}
 */
proto.presence_event.prototype.getEvent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.presence_event.prototype.setEvent = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.presence_event.prototype.clearEvent = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_event.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required presence_event_type event_type = 4;
 * @return {!proto.presence_event.presence_event_type}
 */
proto.presence_event.prototype.getEventType = function() {
  return /** @type {!proto.presence_event.presence_event_type} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.presence_event.presence_event_type} value */
proto.presence_event.prototype.setEventType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.presence_event.prototype.clearEventType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_event.prototype.hasEventType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional pa_client_state pa_client_state = 5;
 * @return {?proto.pa_client_state}
 */
proto.presence_event.prototype.getPaClientState = function() {
  return /** @type{?proto.pa_client_state} */ (
    jspb.Message.getWrapperField(this, proto.pa_client_state, 5));
};


/** @param {?proto.pa_client_state|undefined} value */
proto.presence_event.prototype.setPaClientState = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.presence_event.prototype.clearPaClientState = function() {
  this.setPaClientState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_event.prototype.hasPaClientState = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional pa_rssi_event pa_rssi_event = 6;
 * @return {?proto.pa_rssi_event}
 */
proto.presence_event.prototype.getPaRssiEvent = function() {
  return /** @type{?proto.pa_rssi_event} */ (
    jspb.Message.getWrapperField(this, proto.pa_rssi_event, 6));
};


/** @param {?proto.pa_rssi_event|undefined} value */
proto.presence_event.prototype.setPaRssiEvent = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.presence_event.prototype.clearPaRssiEvent = function() {
  this.setPaRssiEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_event.prototype.hasPaRssiEvent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional pa_proximity_event pa_proximity_event = 7;
 * @return {?proto.pa_proximity_event}
 */
proto.presence_event.prototype.getPaProximityEvent = function() {
  return /** @type{?proto.pa_proximity_event} */ (
    jspb.Message.getWrapperField(this, proto.pa_proximity_event, 7));
};


/** @param {?proto.pa_proximity_event|undefined} value */
proto.presence_event.prototype.setPaProximityEvent = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.presence_event.prototype.clearPaProximityEvent = function() {
  this.setPaProximityEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.presence_event.prototype.hasPaProximityEvent = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto);
